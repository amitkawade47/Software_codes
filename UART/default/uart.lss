
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000039  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000193  00000000  00000000  000001dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000123  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019c  00000000  00000000  00000493  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cf  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000096  00000000  00000000  0000074f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uputc>:
  #define F_CPU 16000000UL
  #define BAUD 9600l
  #define UBRR_VAL ((F_CPU+BAUD*8)/(BAUD*16)-1)   // clever runden

//***********************Funktionen**********************************
void uputc(unsigned char c){		//zeichen senden
  96:	98 2f       	mov	r25, r24

	loop_until_bit_is_set(UCSR0A,UDRE0);	// warten bis puffer frei ist
  98:	80 91 c0 00 	lds	r24, 0x00C0
  9c:	85 ff       	sbrs	r24, 5
  9e:	fc cf       	rjmp	.-8      	; 0x98 <uputc+0x2>
	UDR0=c;								// zeichen schreiben
  a0:	90 93 c6 00 	sts	0x00C6, r25
}	
  a4:	08 95       	ret

000000a6 <uputs>:

//*******************************************************************
void uputs (unsigned char *s){		//string senden
  a6:	fc 01       	movw	r30, r24
  a8:	07 c0       	rjmp	.+14     	; 0xb8 <uputs+0x12>
  #define UBRR_VAL ((F_CPU+BAUD*8)/(BAUD*16)-1)   // clever runden

//***********************Funktionen**********************************
void uputc(unsigned char c){		//zeichen senden

	loop_until_bit_is_set(UCSR0A,UDRE0);	// warten bis puffer frei ist
  aa:	80 91 c0 00 	lds	r24, 0x00C0
  ae:	85 ff       	sbrs	r24, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <uputs+0x4>
}	

//*******************************************************************
void uputs (unsigned char *s){		//string senden
	
  while(*s) uputc(*s++);				//sendet zeichenkette, bis ende.. '\0'    
  b2:	31 96       	adiw	r30, 0x01	; 1

//***********************Funktionen**********************************
void uputc(unsigned char c){		//zeichen senden

	loop_until_bit_is_set(UCSR0A,UDRE0);	// warten bis puffer frei ist
	UDR0=c;								// zeichen schreiben
  b4:	90 93 c6 00 	sts	0x00C6, r25
}	

//*******************************************************************
void uputs (unsigned char *s){		//string senden
	
  while(*s) uputc(*s++);				//sendet zeichenkette, bis ende.. '\0'    
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	b1 f7       	brne	.-20     	; 0xaa <uputs+0x4>
  
}
  be:	08 95       	ret

000000c0 <uinit>:


//*******************************************************************
void uinit (void){					//init usart Tx, 8n1 ,UDRE interupt enable

  UCSR0C |= (3<<UCSZ00);    		// URSEL = 1 dann wird UCSRC benutzt sonst UBRRH ; UCSZ0=data register- 8bit; USBS stop bit 1 	
  c0:	e2 ec       	ldi	r30, 0xC2	; 194
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	80 83       	st	Z, r24
  //Baudrate (high und low byte)
  UBRR0H = (unsigned char)(UBRR_VAL>>8);
  ca:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = (unsigned char)UBRR_VAL;
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B |= (1<<TXEN0)|(1<<RXEN0);  	// UART TX,RX einschalten,	data register empty interrupt enable,
  d4:	e1 ec       	ldi	r30, 0xC1	; 193
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	80 83       	st	Z, r24
}
  de:	08 95       	ret

000000e0 <main>:
	dtostrf(data,totalDigit,decimalNumber,floatString);
	return floatString;
}	
*/
int main()
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	uinit();
  e4:	0e 94 60 00 	call	0xc0	; 0xc0 <uinit>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	c0 e9       	ldi	r28, 0x90	; 144
  ea:	d1 e0       	ldi	r29, 0x01	; 1
//	_delay_ms(100);
	while(1)
	{
		uputs((unsigned char*)"\nLCDCS\n");
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <uputs>
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	97 e2       	ldi	r25, 0x27	; 39
  f8:	fe 01       	movw	r30, r28
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <main+0x18>
 102:	f4 cf       	rjmp	.-24     	; 0xec <main+0xc>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
